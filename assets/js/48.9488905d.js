(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{671:function(n,e,t){"use strict";t.r(e);var a=t(5),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("给定一个已排序的链表的头 "),t("code",[n._v("head")]),n._v(" ， 删除所有重复的元素，使每个元素只出现一次 。返回已排序的链表 。")]),n._v(" "),t("h2",{attrs:{id:"示例-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-1"}},[n._v("#")]),n._v(" 示例 1：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("输入：head = [1,1,2]\n输出：[1,2]\n")])])]),t("h2",{attrs:{id:"示例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[n._v("#")]),n._v(" 示例 2：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("输入：head = [1,1,2,3,3]\n输出：[1,2,3]\n")])])]),t("h2",{attrs:{id:"提示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提示"}},[n._v("#")]),n._v(" 提示：")]),n._v(" "),t("ul",[t("li",[n._v("链表中节点数目在范围 [0, 300] 内")]),n._v(" "),t("li",[n._v("-100 <= Node.val <= 100")]),n._v(" "),t("li",[n._v("题目数据保证链表已经按升序排列")])]),n._v(" "),t("p",[n._v("由于这是一个有序的链表，我们只是做个去重。")]),n._v(" "),t("p",[n._v("思路分析：")]),n._v(" "),t("ol",[t("li",[n._v("链表为空，返回 "),t("code",[n._v("null")])]),n._v(" "),t("li",[n._v("定义快慢指针，快指针比慢指针多走一步，如果快指针的值与慢指针的值相等就让快指针往下走；如果不相等则慢指针的 "),t("code",[n._v("next")]),n._v(" 指向 快指针，慢指针也指向快指针，快指针往下走一步")]),n._v(" "),t("li",[n._v("当快指针指向 "),t("code",[n._v("null")]),n._v("的时候，说明链表已经走完了，此事的慢指针 "),t("code",[n._v("next")]),n._v(" 也需要指向 "),t("code",[n._v("null")])])]),n._v(" "),t("p",[n._v("下面我们用示例 2 来分析一下")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 输入：head = [1,1,2,3,3]\n// 输出：[1,2,3]\n// 初始时\npre = head         // pre 1 1 2 3 3\ncur = head.next    // cur   1 2 3 3\n\n第一轮 值相等， per 原地不动，cur 往下走\n// pre 1 1 2 3 3\n// cur   2 3 3\n第二轮\n// 值不相等的时候 移动 pre\nif(pre.val != cur.val){\n  pre.next = cur // pre  1 2 3 3\n  pre = cur // pre 2 3 3\n}\ncur = cur.next\n// cur 3 3\n\n第三轮 值相等， per 原地不动，cur 往下走\n// pre 3 3\n// cur 3\n第四轮 cur 为 null 链表走完，结束之后 pre.next == null\n// pre 3\n// cur null\npre.next == null\n")])])]),t("h2",{attrs:{id:"solution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[n._v("#")]),n._v(" solution")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n * @lc app=leetcode.cn id=83 lang=javascript\n *\n * [83] 删除排序链表中的重复元素\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n  if(!head) return null\n  let pre = head\n  let cur = head.next\n  while (cur) {\n    if(pre.val != cur.val){\n      pre.next = cur\n      pre = cur\n    }\n    cur = cur.next\n  }\n  pre.next = null\n  return head\n};\n// @lc code=end\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);