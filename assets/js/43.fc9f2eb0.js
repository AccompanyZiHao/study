(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{655:function(n,e,t){"use strict";t.r(e);var a=t(5),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("给你一个链表，删除链表的倒数第 "),t("code",[n._v("n")]),n._v(" 个结点，并且返回链表的头结点。")]),n._v(" "),t("h2",{attrs:{id:"示例-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-1"}},[n._v("#")]),n._v(" 示例 1：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("输入：head = [1,2,3,4,5], n = 2\n输出：[1,2,3,5]\n")])])]),t("h2",{attrs:{id:"示例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[n._v("#")]),n._v(" 示例 2：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("输入：head = [1], n = 1\n输出：[]\n")])])]),t("h2",{attrs:{id:"示例-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[n._v("#")]),n._v(" 示例 3：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("输入：head = [1,2], n = 1\n输出：[1]\n")])])]),t("p",[n._v("提示：")]),n._v(" "),t("p",[n._v("链表中结点的数目为 sz")]),n._v(" "),t("ul",[t("li",[n._v("1 <= sz <= 30")]),n._v(" "),t("li",[n._v("0 <= Node.val <= 100")]),n._v(" "),t("li",[n._v("1 <= n <= sz")])]),n._v(" "),t("p",[n._v("进阶：你能尝试使用一趟扫描实现吗？")]),n._v(" "),t("p",[n._v("我们先来分析这个题目，如果用两个 "),t("code",[n._v("for")]),n._v(" 循环是不是就很简单，第一次算出删除的下标，第二次就可以进行删除操作了，那用一个 "),t("code",[n._v("for")]),n._v(" 循环怎么处理呢？一时之间难以下手，忽然间灵光一闪，两次循环每次用了一个指针，那可以可以用一次循环两个指针呢？如果用两个指针那他们之间的联系又是什么呢？")]),n._v(" "),t("p",[n._v("经过一波分析，发现当快指针走完链表的时候，可以让慢指针刚好到需要删除节点的位置，那他们中间就相差了 "),t("code",[n._v("n")]),n._v("，发现了他们的联系，我们整理一下思路")]),n._v(" "),t("ol",[t("li",[n._v("空链表直接返回")]),n._v(" "),t("li",[n._v("当 n 大于链表的长度的时候，我们之前返回这个链表")]),n._v(" "),t("li",[n._v("当 n 小于链表长度，循环链表，直到快指针的下一个节点为 null, 我们就删除慢指针的下一个节点")])]),n._v(" "),t("p",[n._v("这道题有了思路代码就比较简单了，我们直接整代码吧")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n * @lc app=leetcode.cn id=19 lang=javascript\n *\n * [19] 删除链表的倒数第 N 个结点\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n// 输入：head = [1,2,3,4,5], n = 2\n// 输出：[1,2,3,5]\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  if (!head) return\n  let ret = new ListNode(-1, head)\n  let pre = ret\n  let cur = ret.next\n  // 一个指向虚拟头节点 pre，一个指向真实的节点 cur\n  // cur 移动 n 步  实例 12345 当 cur 指向 null 的时候，pre 指向 3，相差2\n  // pre 和 cur 一起移动，直到 cur 指向空\n  // 然后删除\n  let i = 0\n  while (i < n) {\n    cur = cur.next\n    i++\n  }\n  if (!cur) return head.next\n  while (cur) {\n    pre = pre.next\n    cur = cur.next\n  }\n\n  pre.next = pre.next.next\n\n  return ret.next\n};\n// @lc code=end\n\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);