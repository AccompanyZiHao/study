(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{589:function(n,t,e){n.exports=e.p+"assets/img/61_1.aac8a26e.jpg"},590:function(n,t,e){n.exports=e.p+"assets/img/61_2.2d4f01f7.jpg"},659:function(n,t,e){"use strict";e.r(t);var a=e(5),l=Object(a.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。")]),n._v(" "),a("h2",{attrs:{id:"示例-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例-1"}},[n._v("#")]),n._v(" 示例 1：")]),n._v(" "),a("p",[a("img",{attrs:{src:e(589),alt:"alt"}})]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("输入：head = [1,2,3,4,5], k = 2\n输出：[4,5,1,2,3]\n")])])]),a("h2",{attrs:{id:"示例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[n._v("#")]),n._v(" 示例 2：")]),n._v(" "),a("p",[a("img",{attrs:{src:e(590),alt:"alt"}})]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("输入：head = [0,1,2], k = 4\n输出：[2,0,1]\n")])])]),a("h2",{attrs:{id:"提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提示"}},[n._v("#")]),n._v(" 提示：")]),n._v(" "),a("ul",[a("li",[n._v("链表中节点的数目在范围 [0, 500] 内")]),n._v(" "),a("li",[n._v("-100 <= Node.val <= 100")]),n._v(" "),a("li",[n._v("0 <= k <= 2 * 109")])]),n._v(" "),a("h2",{attrs:{id:"solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[n._v("#")]),n._v(" solution")]),n._v(" "),a("p",[n._v("看到这个题目我们一看，他要求旋转链表，移动节点，这不就是循环这个链表嘛，然后向后移动 k 个位置嘛。有了思路，我们先来看看怎么把他搞成一个环形链表")]),n._v(" "),a("ol",[a("li",[n._v("环形链表的话我们需要收尾相连，只需要把链表的最后一个节点指向头节点就可以了")]),n._v(" "),a("li",[n._v("确定最后一个节点，需要先循环这个链表")]),n._v(" "),a("li",[n._v("生成环形链表之后，向后移动 k 个位置")]),n._v(" "),a("li",[n._v("最后断开这个链表")])]),n._v(" "),a("p",[n._v("我们用示例一的例子来演示一下，确定链表的最后一个节点，向后移动的时候，我们需要知道移动到哪个位置，因此需要知道这个链表的长度")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let cur = head // cur 1,2,3,4,5\nlet length = 1 // 从 1 开始因为 cur.next 的指向的是 2, 3, 4, 5\nwhile(cur.next){\n  cur = cur.next\n  length ++\n}\n// 这个时候 length 为 5，cur 为 5\n")])])]),a("p",[n._v("head 链表向后移动 k 个位置")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("12345 // 初始链表\n51234 // 第一次移动\n45123 // 第二次移动\nk % length 是为了防止 k > length 时的情况\nfor(let i = 0; i < lenth - k % length - 1; i ++>){\n  head = head.next\n}\n")])])]),a("p",[n._v("重新赋值，然后断开链表")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("/*\n * @lc app=leetcode.cn id=61 lang=javascript\n *\n * [61] 旋转链表\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n//  输入：head = [1,2,3,4,5], k = 2\n//  输出：[4,5,1,2,3]\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function (head, k) {\n  if (!head) return null\n  let cur = head\n\n  let length = 1\n  while (cur.next) {\n    cur = cur.next\n    length++\n  }\n  // 成环\n  cur.next = head  // 51234\n  // 找到节点断开\n  // k % length - 1 当 k 大于链表的长度时 leng - k 是负数\n  // length - k % length - 1  = 5 - 2 - 1 = 2\n  for (let i = 0; i < length - k % length - 1; i++) {\n    head = head.next\n    // head 45123 1\n  }\n\n  cur = head.next\n  head.next = null\n  return cur\n};\n// @lc code=end\n\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);